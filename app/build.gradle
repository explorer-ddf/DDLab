apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.ddf.wireless.ddlab"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //
    flavorDimensions("channel", "isPay")

    productFlavors {
        huawei {
            dimension 'channel'
        }

        xiaomi {
            dimension 'channel'
        }

        free {
            dimension 'isPay'
        }

        paid {
            dimension 'isPay'
        }

    }


//    ddf: huaweiPaidDebug outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/huaweiPaid/debug/app-huawei-paid-debug.apk
//    ddf: huaweiPaidRelease outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/huaweiPaid/release/app-huawei-paid-release-unsigned.apk
//    ddf: huaweiFreeDebug outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/huaweiFree/debug/app-huawei-free-debug.apk
//    ddf: huaweiFreeRelease outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/huaweiFree/release/app-huawei-free-release-unsigned.apk
//    ddf: xiaomiPaidDebug outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/xiaomiPaid/debug/app-xiaomi-paid-debug.apk
//    ddf: xiaomiPaidRelease outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/xiaomiPaid/release/app-xiaomi-paid-release-unsigned.apk
//    ddf: xiaomiFreeDebug outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/xiaomiFree/debug/app-xiaomi-free-debug.apk
//    ddf: xiaomiFreeRelease outputs is /Users/didi/ws/DDLab/app/build/outputs/apk/xiaomiFree/release/app-xiaomi-free-release-unsigned.apk

    applicationVariants.all { variant ->
        //    variant = productFlavors+ buildTypes
        println "${variant.flavorName} + ${variant.buildType.name} = ${variant.name}"
        variant.outputs.all {
            println "${variant.name} outputs is ${it.outputFile}"
        }
    }
}

//直接使用gradle.properties中的内容
println(username)


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}


class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = new Date().time
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = new Date().time - startTime
        timings.add([ms, task.path])
        println "${task.path} took ${ms}ms"

        println "${task.path} input files---------"
        task.inputs.files.files.each {
            println it.getAbsoluteFile()
        }
        println "${task.path} output files---------"
        task.outputs.files.files.each{
            println it.getAbsoluteFile()
        }
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()